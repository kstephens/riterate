#!/usr/bin/env ruby

require 'erb'
require 'pp'
require 'fileutils'
require 'yaml'

# Generates Slides for Scarlet from Ruby code.
class LiterateRubySlideGenerator
  module BlankLines
    def blank_line? line
      line && String === line && line =~ /^\s*$/
    end
    
    def remove_leading_and_trailing_blank_lines! lines
      remove_leading_blank_lines! lines
      remove_trailing_blank_lines! lines
    end
    
    def remove_leading_blank_lines! lines
      while blank_line?(lines.first)
        lines.shift
      end
      lines
    end
    
    def remove_trailing_blank_lines! lines
      while blank_line?(lines.last)
        lines.pop
      end
      lines
    end

    def remove_multiple_blank_lines! lines
      i = 0
      while i + 1 < lines.size
        while blank_line?(lines[i]) && blank_line?(lines[i + 1])
          lines.delete_at(i)
          # $stderr.puts "  rmbl!: i = #{i} lines.size = #{lines.size}"
        end
        i += 1
      end
    end

  end
  include BlankLines

  EMPTY_HASH = { }.freeze
  EMPTY_ARRAY = [ ].freeze
  EMPTY_STRING = ''.freeze

  module NamedList
    def [] key
      case key
      when String, Regexp
        find { | e | key === e.name }
      else
        super
      end
    end
  end

  attr_reader :slides, :images
  attr_reader :lines

  attr_accessor :slides_dir, :slides_basename
  attr_accessor :ruby_opts

  def initialize opts = nil
    opts ||= EMPTY_HASH
    @slide = nil
    @slide_stack = [ ]
    @slides = [ ]
    @slides.extend NamedList

    @image = nil
    @image_stack = [ ]
    @images = [ ]
    @images.extend NamedList

    @lines = [ ]

    @slides_dir = '.'
    @slides_basename = nil

    @ruby_opts = ""
    opts.each do | k, v |
      send(:"#{k}=", v)
    end
  end
  
  def process_file! file_name
    @file_name = file_name
    @slides_basename ||= File.basename(file_name, '.rb')
    process_file_contents! File.read(file_name)
    $stderr.puts "Processed #{file_name}"
    self
  end
  
  def process_file_contents! file_contents
    @file_lines = file_contents.split("\n")
    @file_line = 0
    until @file_lines.empty?
      line = @file_lines.shift
      @file_line += 1
      
      # $stderr.puts "#{@file_name}:#{"%5d" % @file_line}: #{line}"
      @lines << line

      indention = kind = command = args = nil
      case line
      when /^(\s*)\#\s*!(SLIDE|PIC)\s*(.*)/
        indention, kind, command = $1, $2, $3
        
        # $stderr.puts "#{@file_name}:#{"%5d" % @file_line}: command = #{command.inspect}"

        args = { }
        command.gsub!(/:(\w+)\s+([^:]+)/) do | *x |
          k, v = $1.to_sym, $2
          v.sub!(/\A\s+/, '')
          v.sub!(/\s+\Z/, '')
          # $stderr.puts "  k = #{k.inspect} => #{v.inspect}"
          args[k] = v
          ''
        end
      end

      case kind
      when 'PIC'
        case command
        when /^end\b/i
          while @image && indention <= @image.indention
            end_image
          end
        when /^begin\b/i
          args[:indention] = indention
          start_image Pic, args
        else
          raise "invalid line #{line}"
        end
        
      when 'SLIDE'
        # $stderr.puts "#{@file_name}:#{"%5d" % @file_line}: args = #{args.inspect}" if ! args.empty?
        # $stderr.puts "#{@file_name}:#{"%5d" % @file_line}: command = #{command.inspect}"

        case command
        when /^end\b/i
          while @slide && indention <= @slide.indention
            end_slide
          end
        when /^(\w+)\s+(\S+)/
          slot, value = $1, $2
          @slide.send(:"#{slot}=", $2)
        when /^(pause|resume)\b/ 
          @slide.send(:"#{$1}!")
        when /^begin\b/i
          args[:indention] = indention
          start_slide args
        when ''
          while @slide && indention <= @slide.indention
            end_slide
          end
          args[:indention] = indention
          start_slide args
        else
          raise "#{@file_name}:#{@file_line}: unknown command #{line}"
        end
      else
        case
        when @image
           if ! @image.title_ && line =~ /^\s*#\s+(.+)/
             @image.title = $1
           else
             @image.lines << line
           end
        when @slide 
           if ! @slide.title && line =~ /^\s*#\s+(.+)/
             @slide.title = $1
           else
             @slide.lines << line unless @slide.paused
           end
        end
      end
    end
  end

  def start_slide opts
    @slide_stack.push @slide
    parent_slide = @slide
    @slide = Slide.new opts
    @slide.owner = self
    @slide.superslide = parent_slide
    @slide.file_name = @file_name
    @slide.file_line = @file_line
    if named_slide = @slides[@slide.name]
      raise Error, "Slide named #{slide.name.inspect} already exists at #{named_slide.file_location}"
    end
    @slides << @slide
    if parent_slide
      unless parent_slide.paused
        parent_slide.subslides << @slide 
        parent_slide.lines << @slide
      end
    end
    @slide
  end

  def end_slide
    @slide = @slide_stack.pop
  end


  def start_image cls, opts
    @image_stack.push @image
    parent_slide = @slide
    @image = cls.new opts
    @image.owner = self
    @image.superslide = parent_slide
    @image.file_name = @file_name
    @image.file_line = @file_line
    @image.index = @images.size + 1
    if named_image = @images[@image.name]
      raise Error, "Image named #{@image.name.inspect} already exists at #{named_image.file_location}"
    end
    @images << @image
    @image
  end

  def end_image
    @file_lines.unshift "#{@image.indention}# #{@image.image_tag}\n"
    @image = @image_stack.pop
  end

  
  ####################################################################


  def render_slides io
    i = 0
    unless images.empty?
      $stderr.puts "Images:"
      images.each do | image |
        $stderr.puts "#{"%3d" % (i += 1)} - @#{"%3d" % image.index} - #{image.name.inspect}"
        image.generate_image!
      end
    end

    i = 0
    ordered_slides.each do | slide |
      $stderr.puts "#{"%3d" % (i += 1)} - @#{"%3d" % slide.index} - #{slide.name.inspect}"
      slide.render_slide(io)
    end
  end
  

  ####################################################################


  def ordered_slides
    @ordered_slides ||=
      begin
        # Generate any subslides (code output slides).
        @slides.each do | slide |
          slide.generate_subslides!
        end

        # Get the assigned slide order!
        assign_slide_order!
        
        # Find the starting point for unordered slides.
        max_index = @slides.map{|s| s.index}.compact.sort[-1]
        max_index ||= 0
        
        # Locate unordered slides, move them to the end.
        @unordered_slides = [ ]
        @slides.each do | slide |
          unless slide.index
            @unordered_slides << slide
            slide.index ||= (max_index += 1)
          end
        end

        # Sort slides by computed index.
        @ordered_slides = @slides.sort { | a, b | a.index <=> b.index }
        unless @unordered_slides.empty?
          $stderr.puts "   WARNING: unordered slides (see #{riterate_yaml_file})"
          @unordered_slides.each do | slide |
            $stderr.puts "  - #{slide.name.inspect}"
          end
        end

        # Save the slide names.
        riterate_yaml['unordered_slides'] = @unordered_slides.map{|s| s.name}
        riterate_yaml_write! unless riterate_yaml['do_not_update']

        @ordered_slides
      end
  end


  def assign_slide_order!
    @unknown_slides = [ ]

    max_index = @slides.map{|s| s.index}.compact.sort[-1]
    max_index ||= 0
    (riterate_yaml['ordered_slides'] ||= [ ]).each do | slide_id |
      slide_id.gsub!(/^\s+|\s+$/, '') if String === slide_id
      # $stderr.puts "  slide_id = #{slide_id.inspect}"
      if slide = slides[slide_id]
        if slide.index
          max_index = slide.index if max_index < slide.index
        else
          slide.index = (max_index += 1)
        end
      else
        @unknown_slides << slide_id
      end
    end

    riterate_yaml['unknown_slides'] = @unknown_slides
    unless @unknown_slides.empty?
      $stderr.puts "  ERROR: unknown slides:"
      @unknown_slides.each do | slide_id |
        $stderr.puts "    #{slide_id.inspect}"
      end
      raise "unknown slides"
    end

    riterate_yaml['ordered_slides'] = @slides.select { | s | s.index }.map { | s | s.name }
  end

  ####################################################################


  def riterate_yaml_file
    @riterate_yaml_file ||=
      "#{slides_dir}/#{slides_basename}.riterate.yml"
  end

  def riterate_yaml file = riterate_yaml_file
    @riterate_yaml ||=
      begin
        if File.exists?(file)
          data = YAML::load(File.read(file))
        else
          $stderr.puts "  #{file} does not exist, creating default file."
          data = { 'riterate' => { 'version' => '1.0', 'ordered_slides' => [ ], 'unordered_slides' => [ ] } }
          @riterate_yaml = data
          riterate_yaml_write!
        end
        raise TypeError, "Expected Hash at top-level" unless Hash === data
        data = data['riterate']
        raise TypeError, "Expected riterate at top-level" unless Hash === data
        data
      rescue Exception => exc
        raise exc.class, "in #{file}: #{exc}"
      end
  end


  def riterate_yaml_write! data = riterate_yaml
    file = riterate_yaml_file
    if File.exists?(file) && ! File.writable?(file)
      $stderr.puts "  WARNING: #{file} is not writable."
      return self
    end

    File.open(file, "w+") do | fh |
      fh.write YAML::dump({ 'riterate' => riterate_yaml })
    end

    self
  end


  def slides_basename
    @slides_basename ||=
      'slides'
  end

  def slides_dirname
    @slides_dirname ||=
      "#{slides_dir}/#{slides_basename}.slides"
  end
 
  def slides_textile
    @slides_textile ||=
      "#{slides_dirname}.textile"
  end

  def slides_textile_erb 
    @slides_textile_erb ||=
      "#{slides_textile}.erb"
  end

  def render_slides_textile!
    File.open(slides_textile_erb, "w+") do | io |
      render_slides io
    end
    $stderr.puts "Created #{slides_textile_erb}"
    
    riterate = self
    erb = ERB.new(File.read(erb_file = slides_textile_erb))
    erb.filename = erb_file
    textile = erb.result(binding)

    textile.gsub!(/"([^"]+)":relative:([^\s]+)/){|x| %Q{<a href="#{$2}">#{$1}</a>}}
    textile.gsub!(/"":relative:([^\s]+)/){|x| %Q{<a href="#{$1}">#{$1}</a>}}
    textile.gsub!(/"":(https?:[^\s]+)/){|x| %Q{"#{$1}":#{$1}}}

    File.open(slides_textile, "w+") { | out | out.puts textile }

    $stderr.puts "Created #{slides_textile}"

    self
  end

  def render_slides_html!
    render_slides_textile!

    slides = slides_dirname

    scarlet = (ENV['SCARLET'] ||= File.expand_path("../../../scarlet/bin/scarlet", __FILE__))

    dirs = %w(stylesheets javascripts image)
    system "set -x; mkdir -p #{slides} #{dirs.map{|d| "#{slides}/#{d}"} * " "}"

    system "set -x; #{scarlet} -f html -g #{slides} #{slides_textile}"

    slides_index_html = "#{slides}/index.html"
    system "set -x; #{scarlet} -f html #{slides_textile} > #{slides_index_html}"

    dirs.each do | d |
      src = d
      system "set -x; cp -p #{src}/*.* #{slides}/#{d}/" if File.directory?(src)
      src = ".riterate/#{d}"
      system "set -x; cp -p #{src}/*.* #{slides}/#{d}/" if File.directory?(src)
    end

    $stderr.puts "Created #{slides}"
    #system("open #{slides_index_html.inspect}")

    self
  end


  class Element
    include BlankLines

    attr_accessor :index, :name, :file_name, :file_line, :title
    attr_accessor :owner, :superslide, :subslides
    attr_accessor :lines, :indention

    attr_accessor :paused

    def initialize opts
      @superslide = nil
      @subslides = [ ]
      @lines = [ ]
      @paused = false
      opts.each do | k, v |
        send(:"#{k}=", v)
      end
    end

    def index= i
      @index = i && i.to_i
    end

    def name
      @name ||=
        title_string.gsub(/^\s+|\s+$/, '').freeze
    end

    def title_
      @title
    end

    def title_string
      @title_string ||=
        "#{title || "#{self.class.name.sub(/.*::/, '')}:#{file_location}"}".freeze
    end

    def title= x
      @name = @title_string = nil
      @title = x
    end

    def file_location
      @file_location ||=
        "#{file_name}:#{file_line}".freeze
    end

    def pause!
      $stderr.puts "  #{self.class} #{name.inspect} pause!"
      @paused = true
    end
    def resume!
      $stderr.puts "  #{self.class} #{name.inspect} resume!"
      @paused = false
    end

    def superslides
      return @superslides if @superslides
      @superslides = [ ]
      s = @superslide
      while s
        @superslides << s
        s = s.superslide
      end
      @superslides
    end
    
  end # class Element


  class Slide < Element
    attr_accessor :capture_code_output, :code_output_lines_per_slide
    attr_accessor :capture_code_output_lines_before
    attr_accessor :code_output, :code_output_slide
    attr_accessor :highlight_code_output

    def initialize opts
      @code_output_lines_per_slide = 15
      @highlight_code_output = /^\*\*\* .*$/
      super
    end

    def create_subslide opts
      opts.update(:owner => owner, 
                  :superslide => self) 
      ss = self.class.new(opts)
      subslides << ss
      owner.slides << ss
      ss
    end

    def generate_subslides!
      unless @generate_subslides
        @generate_subslides = true
        if ! code.empty? && capture_code_output && code_output
          @code_output_slide = 
            create_subslide(
                            :title => "#{title_string} - Output", 
                            :code_output_slide => true,
                            :code_output => code_output)
          $stderr.puts "    Generated slide: #{@code_output_slide.name.inspect}"
        end
      end
      self
    end

    def render_slide io
      unless @lines_prepared
        @lines_prepared = true
        remove_leading_and_trailing_blank_lines! lines
      end

      if code_output_slide == true
        return render_code_output io
      end

      # io.puts ""
      io.puts "!SLIDE"
      io.puts "!TITLE #{title_string}"
      io.puts ""
      io.puts "h1. #{title_string}"
      io.puts ""

      # Render slide body.
      in_ruby = false
      body.each do | line |
        if (! ! line =~ /^\s\s/) != ! ! in_ruby
          in_ruby = ! in_ruby
          if in_ruby
            io.puts "" 
            io.puts "@@@ ruby"
          else
            io.puts "@@@"
            io.puts ""
          end
        end
        io.puts line
      end
      io.puts "@@@" if in_ruby

      io.puts ""

      unless code.empty?
        io.puts "@@@ ruby"
        render_slide_code io
        io.puts "@@@"
        io.puts ""
      end
    end


    def render_slide_code io
      # Render slide code.
      superslides.reverse.each do | s |
        io.puts s.ruby_block_start_line if s.ruby_block_start_line
      end
      
      last_line = nil
      code.each do | line |
        last_line = line
        case line
        when Slide
          line.render_subslide io
        when /#\s*!SLIDE\s+IGNORE/i
          # NOTHING
        else
          io.puts line
        end
      end
      
      if ruby_block_start_line && indention == '' && last_line != 'end'
        io.puts "end"
      end
      
      superslides.each do | s |
        io.puts s.ruby_block_end_line if s.ruby_block_end_line
      end
    end

    def render_code_output io
      if code_output
        lines_per_slide = code_output_lines_per_slide
        $stderr.puts "  Code Output:"
        code_output_lines = code_output.split("\n")
        remove_leading_and_trailing_blank_lines! code_output_lines

        lines = [ ]
        max_line_length = 80
        code_output_lines.map! do | line |
          while line.size > max_line_length
            lines << (line[0 ... max_line_length] << "\\")
            line = line[max_line_length .. -1]
          end
          lines << line
        end
        code_output_lines = lines
        # $stderr.puts PP.pp(code_output_lines, '')
        $stderr.puts "    #{code_output_lines.size} lines (#{lines_per_slide} lines / page)"
        # Prevent empty pages
        code_output_lines << EMPTY_STRING if code_output_lines.empty? 

        code_output_tag = lambda { |cls| %Q{<pre class="code_output#{cls}">}}
        page = 0
        until code_output_lines.empty?
          page += 1
          page_lines = [ ] 
          until code_output_lines.empty? || page_lines.size >= lines_per_slide
            line = code_output_lines.shift
            if @highlight_code_output && @highlight_code_output === line
              line = 
              %Q{</pre>#{code_output_tag.call(:_highlight)}#{line}</pre>#{code_output_tag.call(nil)}}
            end
            page_lines << line
            # Handle Form Feed.
            break if line.gsub!(/\x1a/, '')
          end
          break if page_lines.empty?

          $stderr.puts "    Page #{page} - #{page_lines.size} lines"
          title_str = "#{title_string} #{page > 1 ? "- Page #{page}" : ""}"
          io.puts "!SLIDE"
          io.puts "!TITLE #{title_str}"
          io.puts ""
          io.puts "h1. #{title_str}"
          io.puts ""
          io.puts code_output_tag.call(nil)
          io.puts page_lines * "\n"
          io.puts "</pre>"
          io.puts "MORE ..." unless code_output_lines.empty?
          io.puts ""
        end
      end
    end

    def render_subslide io
      io.puts "#{indention}# #{title_string}"
      if ruby_block_start_line
        io.puts ruby_block_start_line + "; ...; end " 
      else
        io.puts "#{indention}# ..."
      end
    end


    def body
      return @body if @body
      extract_body_and_code!
      @body
    end


    def code
      return @code if @code
      extract_body_and_code!
      @code
    end


    def extract_body_and_code!
      @body = [ ]
      @code = [ ]
      comment_indent = "\\s*"
      first_comment_indent = nil

      lines = self.lines.dup
      remove_leading_and_trailing_blank_lines! lines

      until lines.empty?
        line = lines.shift
        break unless String === line
        case line
        when /^(#{indention})#(\s*)$/
          @body << $2
        when /^(#{indention})#(#{comment_indent})(.+)$/
          if false # title == 'Using a Client Proxy'
            $stderr.puts "indention = #{indention.inspect}"
            $stderr.puts "comment_indent = #{comment_indent.inspect}"
            $stderr.puts "$1 = #{$1.inspect}"
            $stderr.puts "$2 = #{$2.inspect}"
            $stderr.puts "$3 = #{$3.inspect}"
          end
          unless first_comment_indent
            first_comment_indent = comment_indent = $2
          end
          @body << $3
        else
          @code << line
          break
        end
      end

      until lines.empty?
        line = lines.shift
        @code << line
      end
      
      remove_leading_and_trailing_blank_lines! @body
      remove_leading_and_trailing_blank_lines! @code
      
      remove_multiple_blank_lines! @code

      self
    end

    def ruby_block_start_line
      (@ruby_block_start_line ||= [ find_ruby_block_start_line ]).first
    end


    def find_ruby_block_start_line
      lines.each do | line |
        case line
        when /^#{indention}(def|class|module|begin)\b(.*)/
          return line
        end
      end
      nil
    end


    def ruby_block_end_line
      (@ruby_block_end_line ||= [ ruby_block_start_line ? "#{indention}end" : nil ]).first
    end


    def code_output
      @code_output ||=
        capture_code_output &&
        capture_code_output!
    end


    def capture_code_output!
      rb = ".riterate/#{File.basename(file_name)}-#{file_line}-capture.rb"
      file = "#{rb}.out"
      rb_error = "#{rb}.err"

      $stderr.puts "  Capturing code output at #{file_location}-#{file_line + code.size} for Slide #{name.inspect} to #{file}"

      prog = [ ]
      prog << <<"END"
    def __capture_stream cur_stream, new_stream
      old_stream = cur_stream.clone
      cur_stream.reopen(new_stream)
      yield
    ensure
      cur_stream.reopen(old_stream)
    end

END

      if @capture_code_output_lines_before
        owner.lines[0 ... file_line].each do | lines |
          prog << lines
        end
      end

      prog << <<"END"
      File.open(#{file.inspect}, 'w') do | log |
        __capture_stream $stdout, log do
          __capture_stream $stderr, log do
END
    
      code.each do | line |
        prog << line
      end
    
      prog << <<"END"
          end
        end
      end
      exit 0
END
      prog = prog * "\n"
      dir = File.dirname(rb)
      FileUtils.mkdir(dir) unless File.directory?(dir)
      File.open(rb, "w+") { | fh | fh.puts prog }
      cmd = "ruby #{owner.ruby_opts} #{rb.inspect} 2>#{rb_error.inspect}"
      $stderr.puts "+ #{cmd}"
      system(cmd)

      result = ''
      result << (File.read(rb_error) rescue '')
      result << (File.read(file) rescue '')
      result
    ensure
      #File.unlink(file) rescue nil
      #File.unlink(rb) rescue nil
    end
  end # class Slide


  class Pic < Element
    attr_accessor :pic_code
    attr_accessor :pic_file, :svg_file

    def title
      @title ||=
        "pic#{index}"
    end

    def pic_code
      @pic_code ||=
        lines.map{|l| l.sub(/^#{indention}#/, '')}.join("\n")
    end

    def image_size
    end

    def image_tag
      @image_tag ||=
        %Q{<object class="image svg" data="#{image_path}" width="90%" height="67%" />}
    end

    def image_path
      @image_path ||=
        svg_file.sub(Regexp.new("^#{out_dir}/"), '').freeze
    end

    def generate_image!
      FileUtils.mkdir_p(File.dirname(pic_file))
      File.open(pic_file, "w+") do | out |
        # $stderr.puts "pic_document:\n#{pic_document}\n"
        out.write pic_document
      end

      FileUtils.mkdir_p(File.dirname(svg_file))
      cmd = "set -x; #{pic2plot_cmd} #{pic_file.inspect} > #{svg_file.inspect}"
      $stderr.puts "  Generate PIC #{title.inspect} -> SVG"
      system(cmd) or raise "Command #{cmd} failed"

      tmp = "#{svg_file}.tmp"
      File.open(svg_file) do | i |
        File.open(tmp, "w+") do | o |
          until i.eof?
            l = i.readline
            case l
            when /^<svg /
              # l.sub!(/ width="[^"]+"/, '')
              l.sub!(/( height=")([\d.]+)(\w+)(")/) { | m | "#{$1}#{$2.to_i * 3 / 4}#{$3}#{$4}" }
              l.sub!(/ preserveAspectRatio="[^"]+"/i, ' preserveAspectRatio="xMinYMin"')
            #when /^<rect id="background" /
            #  l = EMPTY_STRING
            when /^<g id="content" /
              l.sub!(/ transform="[^"]+"/) do | m |
                m.sub(/(translate\()([^,]+),([^,]+)(\))/) do | m |
                  "#{$1}#{$2},#{$3.to_f - 0.25}#{$4}"
                end
              end
            end
            o.write l
          end
          o.write i.read
        end
      end
      File.rename(tmp, svg_file)

      system("open #{svg_file.inspect}") if ENV['RITERATE_OPEN_PIC']
      # exit 1

      self
    end

    def out_dir
      @out_dir ||=
        ".riterate"
    end

    def pic_file
      @pic_file ||=
        ".riterate/image/#{name.to_s.gsub(/[^-_a-z0-9]/i, '-')}.pic".freeze
    end

    def ps_file
      @ps_file ||= 
        pic_file.sub(/\.pic$/, '.ps').freeze
    end

    def eps_file
      @eps_file ||= 
        ps_file.sub(/\.ps$/, '.eps').freeze
    end

    def svg_file
      @svg_file ||= 
        pic_file.sub(/\.pic$/, '.svg').freeze
    end

    def pic2plot_cmd 
      @pic2plot_cmd ||=
        "pic2plot -Tsvg --portable-output --page-size 800x600 --font-name HersheySans-Bold #{pic2plot_opts}".freeze
    end

    def pic2plot_opts
      @pic2plot_opts ||=
        # "--font-size 0.01".freeze
        "".freeze
    end

    def pic_document
      @pic_document ||=
        <<"END"
.PS 7.75i 7.75i
#{pic_code}
.PE
END
    end
  end # class

end


######################################################################

obj = LiterateRubySlideGenerator.new
ARGV.each do | arg |
  case arg
  when /^--?([^=]+=)(.*)$/
    obj.send(:"#{$1}", $2)
  else
    obj.process_file!(arg)
  end
end

obj.render_slides_html!

exit 0



